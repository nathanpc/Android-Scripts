#!/bin/bash
# Copyright (C) [2012]  [Ryan Esteves]
#
# build-cm: Builds CyanogenMod from source.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see [http://www.gnu.org/licenses/].

# Set BUILDDIR to the folder you would like CyanogenMod to be 
# downloaded to and built from.
# Branch is whatever branch you would like to build. (gingerbread, ics, etc.)
BUILDDIR=~/cyanogenmod/system
BRANCH=gingerbread

# Repo stuff

function setup_repo()
{
    if [ ! $(hash repo 2>&-) ]; then
        echo "  Repo not found installing..."
        export PATH=$PATH:~/bin/
        if [ ! -e ~/bin/repo ]; then
            echo "  Downloading repo..."
            curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo 2> /dev/null || return 1 
            chmod a+x ~/bin/repo || return 1
        fi
    fi
}

function sync_repo()
{
	cd $BUILDDIR
    if [ ! $(repo branches 2>&1 | grep "* $BRANCH") ]; then
        echo "  Initializing repo on $BRANCH branch..."
        repo init -u git://github.com/CyanogenMod/android.git -b $BRANCH || return 1
    fi
    echo "  Performing sync..."
    repo sync -j16 2>&1 > /dev/null || return 1
}

function mk_local_manifest()
{
    if [[ ! -e $BUILDDIR/.repo/local_manifest.xml || ! $(grep "$1" $BUILDDIR/.repo/local_manifest.xml) ]]; then
        echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
        <manifest>
            $1
        </manifest>" > $BUILDDIR/.repo/local_manifest.xml || return 1
    fi
}

# CyanogenMod Stuff

function get_props()
{
    local VENDOR=$1
    local DEVICE=$2
    adb_installed || return 1
    echo "  Please plugin your device..."
    adb 'wait-for-device' # Single quotes here to correct syntax highlighting in some editors
    cd $BUILDDIR/device/$VENDOR/$DEVICE
    ./extract-files.sh
}

function get_prebuilts()
{
	case $BRANCH in
		ics) $BUILDDIR/vendor/cm/get-prebuilts;;
		gingerbread) $BUILDDIR/vendor/cyanogen/get-rommanager;;
	esac
}

# Environment Stuff

function mk_env_dirs()
{
	mkdir -p ~/bin
	mkdir -p $BUILDDIR
}

function install_build_deps()
{
    PACKAGES="git-core gnupg flex bison gperf libsdl1.2-dev libesd0-dev libwxgtk2.6-dev squashfs-tools build-essential zip curl libncurses5-dev zlib1g-dev pngcrush schedtool"
    local UBUNTUVERSION=$(lsb_release -a 2>&1 | grep 'Release:' | awk '{print $2}')
    # Check if 64bit
    if [ "uname -m" != "X86_64" ]; then
        PACKAGES="$PACKAGES g++-multilib lib32z1-dev lib32ncurses5-dev"

        # gcc-4.3-multilib, g++-4.3-multilib, and lib32readline5-dev are only available for Ubuntu 11.04 <
        # lib32readline-gplv2-dev replaces lib32readline5-dev in Ubuntu 11.10
        # Note: Not sure why but '== 1' needs to be in the if statement for this to work
        if [ $(echo "$UBUNTUVERSION < 11.04" | bc) == 1 ]; then
            PACKAGES="$PACKAGES gcc-4.3-multilib g++-4.3-multilib lib32readline5-dev"
        else
            PACKAGES="$PACKAGES lib32readline-gplv2-dev"
        fi
    fi
    PACKAGES="$PACKAGES sun-java6-jdk"
    
    echo ""
    read -n1 -e -p "Permission to install $PACKAGES? (Y,n)"
    [[ $REPLY == [Yy] || ! $REPLY ]] && { 
        # Sun Java 6 is not available in the standard repositories for 10.04 >
        # Need to add lucid partner repo to gain access.
        if [ $(echo "$UBUNTUVERSION >= 10.04" | bc) ]; then
            if [[ ! $(cat /etc/apt/sources.list | grep 'lucid partner') ]]; then
                echo ""
                echo "In order to install Sun Java 6 JDK, the 'lucid partner' repository must be added to your sources list."
                read -n1 -e -p "Add lucid partner to your repositories list? (Y,n)"
                [[ $REPLY == [Yy] || ! $REPLY ]] && sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner" > /dev/null || return 1
                echo "  Updating apt..."
                sudo apt-get -q update || return 1
            fi
        fi
        echo "  Installing required packages..."; sudo apt-get install -q -y $PACKAGES && echo "    Done!";
    } || return 1
}

# SDK Stuff

function adb_installed()
{
    hash adb 2>&- || return 1
}

# Building stuff

function run_build()
{
    local DEVICE=$1
	cd $BUILDDIR
	echo "  Cleaning up before build..."
	make clobber > /dev/null 2>&1
	echo "  Setting up the environment..."
	. build/envsetup.sh
	echo "  Starting build for $DEVICE! (This WILL take awhile... Go make a sandwhich)"
	brunch $DEVICE
}

# General stuff

function error_exit()
{
    echo "Failure: $1" >&2
    if [ ! $IGNERRORS ]; then
        echo "Exiting..."
        exit 1
    fi
}

function req_setup()
{	
    # Create build environment directories
    if [[ ! -d $BUILDDIR || ! -d ~/bin ]]; then
        echo "Creating required directories..."
        mk_env_dirs || error_exit "Creating required directories failed!"
    fi

    # Install build essential packages
    echo "Installing build essential dependancies..."
    install_build_deps || error_exit "Installing build essential dependancies failed!"

    # Repo is required
    echo "Setting up repo..."
    setup_repo || error_exit "Setting up repo failed!"

    # Sync repo
    echo "Performing initial sync... (This can take a loooong time)"
    sync_repo || error_exit "Sync failed!"

    # Get Prebuilts
    echo "Fetching prebuilts..."
    get_prebuilts || error_exit "Fetching prebuilts failed!"
}

# Device specific stuff

function epicmtd()
{
    # Ensure device is set correctly
    local DEVICE=epicmtd
    
    # Ensure repo is setup
    echo "Making sure repo is setup"
    setup_repo || error_exit "Setting up repo failed"
    
    if [ $BRANCH == 'ics' ]; then # Epic only requires this for ics
	    # Create a local manifest
	    echo "Setting up local manifest..."
	    mk_local_manifest '<project path="kernel/samsung/victory" name="CyanogenMod/android_kernel_samsung_victory" remote="github" revision="ics"/>'
    fi
    
    # Sync repo
    echo "Performing repo sync... (This can take awhile)"
    sync_repo || error_exit "Sync failed!"

	# Plug in your device running CM to get the proprietary files
	echo "Getting proprietary files..."
    get_props samsung epicmtd

    #Compile
    echo "Starting build..."
    run_build epicmtd
}


function crespo4g()
{
    # Ensure device is set correctly
    local DEVICE=crespo4g
    
    # Ensure repo is setup
    echo "Making sure repo is setup and accessible..."
    setup_repo || error_exit "Setting up repo failed"
    
    # Sync repo
    echo "Performing repo sync... (This can take awhile)"
    sync_repo || error_exit "Sync failed!"

	# Plug in your device running CM to get the proprietary files
	echo "Getting proprietary files..."
    get_props samsung crespo4g

    #Compile
    echo "Starting build..."
    run_build crespo4g
}

function crespo()
{
    # Ensure device is set correctly
    local DEVICE=crespo4g
    
    # Ensure repo is setup
    echo "Making sure repo is setup and accessible..."
    setup_repo || error_exit "Setting up repo failed"
    
    # Sync repo
    echo "Performing repo sync... (This can take awhile)"
    sync_repo || error_exit "Sync failed!"

	# Plug in your device running CM to get the proprietary files
	echo "Getting proprietary files..."
    get_props samsung crespo

    #Compile
    echo "Starting build..."
    run_build crespo
}

while getopts ":si-:b:" opt; do
    case $opt in
        s) RUNSETUP=true;;
        i) IGNERRORS=true;;
        b) BRANCH=$OPTARG;;
        -) {
            case $OPTARG in
                setup) RUNSETUP=true;;
                ignore-errors) IGNERRORS=true;;
                *) echo "Invalid option: --$OPTARG" >&2; exit 1;;
            esac
        };;
       \?) echo "Invalid option: -$OPTARG" >&2; exit 1;;
        :) echo "Option -$OPTARG requires an argument." >&2; exit 1;;
    esac
done

if [ $RUNSETUP ]; then
    req_setup
fi

for param in $@
do
    case $param in
        epicmtd|epic4g) epicmtd;;
        crespo4g|nexuss4g) crespo4g;;
        crespo|nexuss) crespo;;
    esac
done
